Coverage Report by file with details

=================================================================================
=== File: BM_lamda_ssscrazy_buggy1.v
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        55        54         1    98.18%

================================Branch Details================================

Branch Coverage for file BM_lamda_ssscrazy_buggy1.v --

------------------------------------IF Branch------------------------------------
    89                                      6977     Count coming in to IF
    89              1                       2597     assign add_dec1  =(IS_255_1)?  8'h00 :
    90              1                       4380     				 (&add_1[7:0] && !add_1[8])?     8'h01 : 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    90                                      4380     Count coming in to IF
    90              2                         10     				 (&add_1[7:0] && !add_1[8])?     8'h01 : 
    91              1                       4370     				 (div1)? add_1[7:0] - (add_1[8]) +1 :
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    91                                      5537     Count coming in to IF
    91              2                       1504     				 (div1)? add_1[7:0] - (add_1[8]) +1 :
    92              1                       4033     				 add_1[7:0] +add_1[8] +1 ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    96                                    166417     Count coming in to IF
    96              1                          7     	if (reset)
    126             1                     166410     	else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    128                                   166410     Count coming in to CASE
    130             1                     101217     			default:begin  /// idle Step    ----- > Step1
    158             1                       1616     			Step2:begin
    163             1                      11480     			Step3:begin
    213             1                      10248     			Step4:begin
    236             1                       7070     			Step5:begin
    278             1                       1616     			Step6:begin
    292             1                       1616     			Step7:begin	
    301             1                      31547     			Step8: begin
Branch totals: 8 hits of 8 branches = 100.00%

------------------------------------IF Branch------------------------------------
    143                                   101217     Count coming in to IF
    143             1                    ***0***     				if(erasure_ready)
                                          101217     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    148                                   101217     Count coming in to IF
    148             1                        101     				if(Sm_ready)
                                          101116     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    164                                    11480     Count coming in to IF
    164             1                        326     				if (N==0)
    172             1                      11154     				else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    167                                      326     Count coming in to IF
    167             1                        240     						if(S[K+e_cnt]==0)
    169             1                         86     						else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    175                                    11154     Count coming in to IF
    175             1                       1290     						if(cnt == N+4)
    183             1                       9864     						else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    178                                     1290     Count coming in to IF
    178             1                        522     								if ( (D^dec1)  == 0)	
    180             1                        768     								else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    186                                    11154     Count coming in to IF
    186             1                       1290     						if (cnt == 0)
    190             1                       5160     						else if (cnt < 5)
    199             1                       4704     						else  /// from 5 to  N+4
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    197                                     4382     Count coming in to IF
    197             1                        880     								IS_255_1<=(&pow1 || &pow2)? 1:0;
    197             2                       3502     								IS_255_1<=(&pow1 || &pow2)? 1:0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    206                                     4660     Count coming in to IF
    206             1                       1307     								IS_255_1<=(&pow1 || &pow2)? 1:0;
    206             2                       3353     								IS_255_1<=(&pow1 || &pow2)? 1:0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    215                                    10248     Count coming in to IF
    215             1                        854     				if(cnt == (11 - e_cnt[3:1]) )
    220             1                       9394     				else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    228                                     9833     Count coming in to IF
    228             1                       2325     				IS_255_1<=(&pow1 || &pow2)? 1:0;
    228             2                       7508     				IS_255_1<=(&pow1 || &pow2)? 1:0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    230                                    10248     Count coming in to IF
    230             1                       6832     				if (cnt>3) 
                                            3416     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    237                                     7070     Count coming in to IF
    237             1                        336     				if ({N,1'b0} >= K )     /// 2N >= K
    245             1                       6734     				else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    248                                     6734     Count coming in to IF
    248             1                        518     						if(cnt == (12-e_cnt[3:1]) )
    260             1                       6216     						else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    268                                     5810     Count coming in to IF
    268             1                       1316     						IS_255_1<=(&pow1 || &pow2)? 1:0;
    268             2                       4494     						IS_255_1<=(&pow1 || &pow2)? 1:0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    270                                     6734     Count coming in to IF
    270             1                       4662     						if (cnt>3)  
                                            2072     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    293                                     1616     Count coming in to IF
    293             1                       1515     				if(K< 16 - e_cnt)
    295             1                        101     				else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    302                                    31547     Count coming in to IF
    302             1                        101     				if(const_timing == 0)
                                           31446     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    312                                   166410     Count coming in to IF
    312             1                     101217     			if(Step == Step1)
    317             1                      65193     			else
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      24        22         2    91.66%

================================Condition Details================================

Condition Coverage for file BM_lamda_ssscrazy_buggy1.v --

----------------Focused Condition View-------------------
Line       90 Item    1  (&add_1[7:0] && !add_1[8])
Condition totals: 2 of 2 input terms covered = 100.00%

----------------Focused Condition View-------------------
Line       164 Item    1  (N == 0)
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       167 Item    1  (S[K+e_cnt] == 0)
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       175 Item    1  (cnt == (N + 4))
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       178 Item    1  ((D ^ dec1) == 0)
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       186 Item    1  (cnt == 0)
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       190 Item    1  (cnt < 5)
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       197 Item    1  (&pow1 || &pow2)
Condition totals: 2 of 2 input terms covered = 100.00%

----------------Focused Condition View-------------------
Line       206 Item    1  (&pow1 || &pow2)
Condition totals: 2 of 2 input terms covered = 100.00%

----------------Focused Condition View-------------------
Line       215 Item    1  (cnt == (11 - e_cnt[3:1]))
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       228 Item    1  (&pow1 || &pow2)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       &pow1         Y
       &pow2         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  &pow1_0               ~&pow2                        
  Row   2:          1  &pow1_1               -                             
  Row   3:          1  &pow2_0               ~&pow1                        
  Row   4:    ***0***  &pow2_1               ~&pow1                        

----------------Focused Condition View-------------------
Line       230 Item    1  (cnt > 3)
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       237 Item    1  ({N,0} >= K)
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       248 Item    1  (cnt == (12 - e_cnt[3:1]))
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       268 Item    1  (&pow1 || &pow2)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       &pow1         Y
       &pow2         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  &pow1_0               ~&pow2                        
  Row   2:          1  &pow1_1               -                             
  Row   3:          1  &pow2_0               ~&pow1                        
  Row   4:    ***0***  &pow2_1               ~&pow1                        

----------------Focused Condition View-------------------
Line       270 Item    1  (cnt > 3)
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       293 Item    1  (K < (16 - e_cnt))
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       302 Item    1  (const_timing == 0)
Condition totals: 1 of 1 input term covered = 100.00%

----------------Focused Condition View-------------------
Line       312 Item    1  (Step == 1)
Condition totals: 1 of 1 input term covered = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     195       194         1    99.48%

================================Statement Details================================

Statement Coverage for file BM_lamda_ssscrazy_buggy1.v --

    1                                                /* This program is free software: you can redistribute it and/or modify
    2                                                   it under the terms of the GNU General Public License as published by
    3                                                   the Free Software Foundation, either version 3 of the License, or
    4                                                   (at your option) any later version.
    5                                                
    6                                                   This program is distributed in the hope that it will be useful,
    7                                                   but WITHOUT ANY WARRANTY; without even the implied warranty of
    8                                                   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    9                                                   GNU General Public License for more details.
    10                                               
    11                                                  You should have received a copy of the GNU General Public License
    12                                                  along with this program.  If not, see <http://www.gnu.org/licenses/>.
    13                                                  
    14                                                  Email : semiconductors@varkongroup.com
    15                                                  Tel   : 1-732-447-8611
    16                                                  
    17                                               */
    18                                               
    19                                               
    20                                               module BM_lamda
    21                                               //// use Berlekamp Massey�s Algorithm to calculate lamda polynomial
    22                                               (
    23                                               input clk, // input clock planned to be 56 Mhz
    24                                               input reset, // active high asynchronous reset
    25                                               
    26                                               // input modified syndromes in decimal format 
    27                                               input [7:0] Sm1,Sm2,Sm3,Sm4,Sm5,Sm6,Sm7,Sm8,                    
    28                                               input [7:0] Sm9,Sm10,Sm11,Sm12,Sm13,Sm14,Sm15,Sm16,    
    29                                               
    30                                               //active high flag for one clock to indicate that input Sm is ready
    31                                               input Sm_ready,   
    32                                               
    33                                               // active high flag for one clock to indicate that erasures values are ready
    34                                               input erasure_ready, 
    35                                               input [3:0] erasure_cnt,  /// number of erasures per block 0:8 
    36                                               
    37                                               input [7:0] pow1,pow2,    /// output of power memories
    38                                               input [7:0] dec1,        /// output of decimal memories
    39                                               
    40                                               output reg [7:0] add_pow1,add_pow2,     /// address to power memories
    41                                               output  [7:0] add_dec1,                              /// address to decimal memories
    42                                               
    43                                               // active high flag for one clock to indicate that lamda polynomial is ready
    44                                               output reg L_ready,  
    45                                               output [7:0] L1,L2,L3,L4,L5,L6,L7,L8   ///  lamda coeff values in decimal format 
    46                                               );
    47                                               
    48                                               reg [7:0] L [1:9];   /// Lamda polynomial coeff
    49                                               reg [7:0] Lt [1:9]; /// temp register for next Lamda polynomial coeff values
    50                                               reg [7:0] T [1:10];  /// T polynomial
    51                                               reg [7:0] D; /// delta
    52                                               
    53                                               reg [4:0]  K;  //  max 16   // operation counter
    54                                               reg [3:0]  N;  //  max 8    // operation counter
    55                                               
    56                                               
    57                                               reg [3:0]  e_cnt;
    58                                               reg [7:0] S [1:16];
    59                                               
    60                                               
    61                                               reg [8:0] add_1;   /// address to decimal memory
    62                                               reg IS_255_1;
    63                                               reg div1;  ///  1  division ,  0 multiplication
    64                                               
    65                                               reg [3:0] cnt ;  // max 12
    66                                               
    67                                               parameter Step1  = 8'b00000001;
    68                                               parameter Step2  = 8'b00000010;
    69                                               parameter Step3  = 8'b00000100;
    70                                               parameter Step4  = 8'b00001000;
    71                                               parameter Step5  = 8'b00010000;
    72                                               parameter Step6  = 8'b00100000;
    73                                               parameter Step7  = 8'b01000000;
    74                                               parameter Step8  = 8'b10000000;
    75                                               
    76                                               reg [8:0] const_timing;
    77              1                          1     reg [7:0] Step = Step1;
    78                                               
    79              1                        334     assign L1=L[2];
    80              1                        334     assign L2=L[3];
    81              1                        334     assign L3=L[4];
    82              1                        334     assign L4=L[5];
    83              1                        334     assign L5=L[6];
    84              1                        334     assign L6=L[7];
    85              1                        334     assign L7=L[8];
    86              1                        334     assign L8=L[9];
    87                                               
    88                                               //// to handle mutipilcation / division output (address to decimal memory)
    89              1                       8145     assign add_dec1  =(IS_255_1)?  8'h00 :
    90                                               				 (&add_1[7:0] && !add_1[8])?     8'h01 : 
    91                                               				 (div1)? add_1[7:0] - (add_1[8]) +1 :
    92                                               				 add_1[7:0] +add_1[8] +1 ;
    93                                               
    94              1                     166417     always@(posedge reset or posedge clk)
    95                                               begin
    96                                               	if (reset)
    97                                               		begin
    98              1                          7     			add_1<=0;
    99              1                          7     			IS_255_1<=0;
    100             1                          7     			div1<=0;
    101             1                          7     			add_pow1<=0;add_pow2<=0;
    101             2                          7     
    102                                              			
    103             1                          7     			e_cnt<=0;
    104                                              			
    105             1                          7     			S[1]<=0;S[2]<=0;S[3]<=0;S[4]<=0;S[5]<=0;
    105             2                          7     
    105             3                          7     
    105             4                          7     
    105             5                          7     
    106             1                          7     			S[6]<=0;S[7]<=0;S[8]<=0;     
    106             2                          7     
    106             3                          7     
    107             1                          7     			S[9]<=0;S[10]<=0;S[11]<=0;S[12]<=0;S[13]<=0;
    107             2                          7     
    107             3                          7     
    107             4                          7     
    107             5                          7     
    108             1                          7     			S[14]<=0;S[15]<=0;S[16]<=0;
    108             2                          7     
    108             3                          7     
    109                                              			
    110             1                          7     			L[1]<=0; L[2]<=0; L[3]<=0;L[4]<=0;L[5]<=0;
    110             2                          7     
    110             3                          7     
    110             4                          7     
    110             5                          7     
    111             1                          7     			L[6]<=0;L[7]<=0;L[8]<=0;L[9]<=0;
    111             2                          7     
    111             3                          7     
    111             4                          7     
    112             1                          7     			Lt[1]<=0; Lt[2]<=0; Lt[3]<=0;Lt[4]<=0;Lt[5]<=0;
    112             2                          7     
    112             3                          7     
    112             4                          7     
    112             5                          7     
    113             1                          7     			Lt[6]<=0;Lt[7]<=0;Lt[8]<=0;Lt[9]<=0;
    113             2                          7     
    113             3                          7     
    113             4                          7     
    114             1                          7     			T[1]<=0; T[2]<=0; T[3]<=0;T[4]<=0;T[5]<=0;
    114             2                          7     
    114             3                          7     
    114             4                          7     
    114             5                          7     
    115             1                          7     			T[6]<=0;T[7]<=0;T[8]<=0;T[9]<=0;T[10]<=0;
    115             2                          7     
    115             3                          7     
    115             4                          7     
    115             5                          7     
    116             1                          7     			D<=0;
    117             1                          7     			K<=0;
    118             1                          7     			N<=0;
    119                                              			
    120             1                          7     			cnt<=0;
    121             1                          7     			Step<=Step1;
    122                                              			
    123             1                          7     			L_ready<=0;
    124             1                          7     			const_timing<=0;	
    125                                              		end
    126                                              	else
    127                                              		begin
    128                                              			case (Step)
    129                                              			/////////////////////////////////////////////////////////////////
    130                                              			default:begin  /// idle Step    ----- > Step1
    131             1                     101217     				L[1]<=1; L[2]<=0; L[3]<=0;L[4]<=0;L[5]<=0;
    131             2                     101217     
    131             3                     101217     
    131             4                     101217     
    131             5                     101217     
    132             1                     101217     				L[6]<=0;L[7]<=0;L[8]<=0;L[9]<=0;
    132             2                     101217     
    132             3                     101217     
    132             4                     101217     
    133             1                     101217     				Lt[1]<=1; Lt[2]<=0; Lt[3]<=0;Lt[4]<=0;Lt[5]<=0;
    133             2                     101217     
    133             3                     101217     
    133             4                     101217     
    133             5                     101217     
    134             1                     101217     				Lt[6]<=0;Lt[7]<=0;Lt[8]<=0;Lt[9]<=0;
    134             2                     101217     
    134             3                     101217     
    134             4                     101217     
    135             1                     101217     				T[1]<=0; T[2]<=1; T[3]<=0;T[4]<=0;T[5]<=0;
    135             2                     101217     
    135             3                     101217     
    135             4                     101217     
    135             5                     101217     
    136             1                     101217     				T[6]<=0;T[7]<=0;T[8]<=0;T[9]<=0;T[10]<=0;
    136             2                     101217     
    136             3                     101217     
    136             4                     101217     
    136             5                     101217     
    137             1                     101217     				D<=0;
    138             1                     101217     				K<=0;
    139             1                     101217     				N<=0;
    140             1                     101217     				cnt<=0;
    141             1                     101217     				L_ready<=0;
    142                                              				//////// register erasure count///////////////////////////////
    143                                              				if(erasure_ready)
    144                                              					begin
    145             1                    ***0***     						e_cnt<=erasure_cnt;
    146                                              					end
    147                                              				//// when input modified syndromes are ready//////////
    148                                              				if(Sm_ready)
    149                                              					begin
    150             1                        101     						Step<=Step2;
    151             1                        101     						S[1]<=Sm1;S[2]<=Sm2;S[3]<=Sm3;S[4]<=Sm4;S[5]<=Sm5;
    151             2                        101     
    151             3                        101     
    151             4                        101     
    151             5                        101     
    152             1                        101     						S[6]<=Sm6;S[7]<=Sm7;S[8]<=Sm8;     
    152             2                        101     
    152             3                        101     
    153             1                        101     						S[9]<=Sm9;S[10]<=Sm10;S[11]<=Sm11;S[12]<=Sm12;
    153             2                        101     
    153             3                        101     
    153             4                        101     
    154             1                        101     						S[13]<=Sm13;S[14]<=Sm14;S[15]<=Sm15;S[16]<=Sm16;
    154             2                        101     
    154             3                        101     
    154             4                        101     
    155                                              					end
    156                                              			end
    157                                              			//////////////////////////////////////////////////////////
    158                                              			Step2:begin
    159             1                       1616     				K<= K+1;
    160             1                       1616     				Step<=Step3;
    161                                              			end
    162                                              			/////////////////////////////////////////////////////////
    163                                              			Step3:begin
    164                                              				if (N==0)
    165                                              					begin
    166             1                        326     						D<= S[K+e_cnt];
    167                                              						if(S[K+e_cnt]==0)
    168             1                        240     							Step<= Step6;
    169                                              						else
    170             1                         86     							Step <= Step4;
    171                                              					end
    172                                              				else
    173                                              					begin
    174                                              					
    175                                              						if(cnt == N+4)
    176                                              							begin
    177             1                       1290     								cnt<=0;
    178                                              								if ( (D^dec1)  == 0)	
    179             1                        522     									Step <= Step6;
    180                                              								else
    181             1                        768     									Step <= Step4;
    182                                              							end
    183                                              						else
    184             1                       9864     							cnt<=cnt+1;
    185                                              						///////////////////////////////////////////	
    186                                              						if (cnt == 0)
    187                                              							begin
    188             1                       1290     								D<= S[K+e_cnt];
    189                                              							end
    190                                              						else if (cnt < 5)
    191                                              							begin
    192             1                       5160     								add_pow1<= L[cnt+1];
    193             1                       5160     								add_pow2<= S[K+e_cnt-cnt];
    194                                              								
    195             1                       5160     								div1<=0;
    196             1                       5160     								add_1<= pow1 + pow2;
    197             1                       5160     								IS_255_1<=(&pow1 || &pow2)? 1:0;
    198                                              							end
    199                                              						else  /// from 5 to  N+4
    200                                              							begin
    201             1                       4704     								add_pow1<= L[cnt+1];
    202             1                       4704     								add_pow2<= S[K+e_cnt-cnt];
    203                                              								
    204             1                       4704     								div1<=0;
    205             1                       4704     								add_1<= pow1 + pow2;
    206             1                       4704     								IS_255_1<=(&pow1 || &pow2)? 1:0;
    207                                              								
    208             1                       4704     								D <= D ^ dec1;
    209                                              							end
    210                                              					end
    211                                              			end
    212                                              			/////////////////////////////////////////////////////////
    213                                              			Step4:begin
    214                                              				////////////////////////////////////////
    215                                              				if(cnt == (11 - e_cnt[3:1]) )
    216                                              					begin
    217             1                        854     						cnt<=0;
    218             1                        854     						Step <= Step5;
    219                                              					end
    220                                              				else
    221             1                       9394     					cnt<=cnt+1;
    222                                              				///////////////////////////////////////////	
    223             1                      10248     				add_pow1<= T[cnt+2];
    224             1                      10248     				add_pow2 <= D;
    225                                              
    226             1                      10248     				div1<=0;
    227             1                      10248     				add_1<= pow1 + pow2;
    228             1                      10248     				IS_255_1<=(&pow1 || &pow2)? 1:0;
    229                                              			
    230                                              				if (cnt>3) 
    231                                              					begin
    232             1                       6832     						Lt[cnt-2] <= L[cnt-2] ^ dec1;
    233                                              					end
    234                                              			end
    235                                              			/////////////////////////////////////////////////////////////
    236                                              			Step5:begin
    237                                              				if ({N,1'b0} >= K )     /// 2N >= K
    238                                              					begin
    239             1                        336     						Step<=Step6;
    240             1                        336     						L[1]<=Lt[1]; L[2]<=Lt[2]; L[3]<=Lt[3]; 
    240             2                        336     
    240             3                        336     
    241             1                        336     						L[4]<=Lt[4]; L[5]<=Lt[5];
    241             2                        336     
    242             1                        336     						L[6]<=Lt[6]; L[7]<=Lt[7];
    242             2                        336     
    243             1                        336     						L[8]<=Lt[8]; L[9]<=Lt[9];
    243             2                        336     
    244                                              					end
    245                                              				else
    246                                              					begin
    247                                              						////////////////////////////////////////
    248                                              						if(cnt == (12-e_cnt[3:1]) )
    249                                              							begin
    250             1                        518     								cnt<=0;
    251             1                        518     								Step <= Step6;
    252                                              								
    253             1                        518     								N <= K - N;
    254                                              								
    255             1                        518     								L[1]<=Lt[1]; L[2]<=Lt[2]; L[3]<=Lt[3];
    255             2                        518     
    255             3                        518     
    256             1                        518     								L[4]<=Lt[4]; L[5]<=Lt[5];
    256             2                        518     
    257             1                        518     								L[6]<=Lt[6]; L[7]<=Lt[7]; 
    257             2                        518     
    258             1                        518     								L[8]<=Lt[8]; L[9]<=Lt[9];
    258             2                        518     
    259                                              							end
    260                                              						else
    261             1                       6216     							cnt<=cnt+1;
    262                                              						///////////////////////////////////////////	
    263             1                       6734     						add_pow1<= L[cnt+1];
    264             1                       6734     						add_pow2 <= D;
    265                                              
    266             1                       6734     						div1<=1;
    267             1                       6734     						add_1<= pow1 - pow2;
    268             1                       6734     						IS_255_1<=(&pow1 || &pow2)? 1:0;
    269                                              					
    270                                              						if (cnt>3)  
    271                                              							begin
    272             1                       4662     								T[cnt-3] <= dec1;
    273                                              							end
    274                                              						//////////////////////////////////////////////
    275                                              					end
    276                                              			end
    277                                              			////////////////////////////////////////////////////////////
    278                                              			Step6:begin
    279             1                       1616     				Step<=Step7;
    280             1                       1616     				T[1]<=0;
    281             1                       1616     				T[2]<=T[1];
    282             1                       1616     				T[3]<=T[2];
    283             1                       1616     				T[4]<=T[3];
    284             1                       1616     				T[5]<=T[4];
    285             1                       1616     				T[6]<=T[5];
    286             1                       1616     				T[7]<=T[6];
    287             1                       1616     				T[8]<=T[7];
    288             1                       1616     				T[9]<=T[8];
    289             1                       1616     				T[10]<=T[9];
    290                                              			end
    291                                              			////////////////////////////////////////////////////////////
    292                                              			Step7:begin	
    293                                              				if(K< 16 - e_cnt)
    294             1                       1515     					Step<=Step2;
    295                                              				else
    296                                              					begin
    297             1                        101     						Step<=Step8;
    298                                              					end
    299                                              			end
    300                                              			////////////////////////////////////////////////////////////
    301                                              			Step8: begin
    302                                              				if(const_timing == 0)
    303                                              					begin
    304             1                        101     						L_ready<=1;
    305             1                        101     						Step<=Step1;
    306                                              					end
    307                                              			end
    308                                              			////////////////////////////////////////////////////////////
    309                                              			endcase
    310                                              			
    311                                              			////////////////  const timing Step machine //////////
    312                                              			if(Step == Step1)
    313                                              				begin
    314                                              					//// max possible is estimated to 500 clks
    315             1                     101217     					const_timing<=8'd500;   
    316                                              				end
    317                                              			else
    318                                              				begin
    319             1                      65193     					const_timing <=const_timing -1;
    320                                              				end
    321                                              			//////////////////////////////////////////
    322                                              			
    323                                              		end
    324                                              end
    325                                              
    326                                              
    327                                              endmodule 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        140       132         8    94.28%

================================Toggle Details================================

Toggle Coverage for File BM_lamda_ssscrazy_buggy1.v --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------
         57                               e_cnt[3]           0           0        0.00 
         57                               e_cnt[2]           0           0        0.00 
         57                               e_cnt[1]           0           0        0.00 
         57                               e_cnt[0]           0           0        0.00 

Total Node Count     =         70 
Toggled Node Count   =         66 
Untoggled Node Count =          4 

Toggle Coverage      =      94.28% (132 of 140 bins)


Total Coverage By File (code coverage only, filtered view): 95.90%

